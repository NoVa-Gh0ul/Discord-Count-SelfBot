const axios = require('axios'), fs = require('fs'), WebSocket = require('ws'); let login = false; function color(message, color) { return `\x1b[37m[\x1b[0m\x1b[${color}m${message}\x1b[0m\x1b[37m]\x1b[0m`; } function color2(message, color) { return `\x1b[37m\x1b[0m\x1b[${color}m${message}\x1b[0m\x1b[37m\x1b[0m`; } async function m(id, token) { try { const r = await axios.get(`https://discord.com/api/v9/channels/${id}/messages?limit=1`, { headers: { 'Authorization': `${token}` } }); return r.data[0]; } catch (error) { return null; } } async function status(ws, token, config) { const l = config.device_spoof === 'pc' ? 'linux' : 'Discord Android'; ws.send(JSON.stringify({ op: 2, d: { token: token, properties: { $os: l, $browser: "shwp", $device: "shwp" }, presence: { status: config.status || 'online', since: 0, activities: [], afk: false } } })); } async function count() { let config; try { config = JSON.parse(fs.readFileSync('config.json', 'utf8')); } catch (error) { console.error(color('ERROR', '31'), error); return; } const token = config.token, id = config.channel_id, message = await m(id, token); let new_count = 1; if (message) { const last_message = parseInt(message.content); if (!isNaN(last_message)) { new_count = last_message + 1; } } try { const i = await axios.post(`https://discord.com/api/v9/channels/${id}/messages`, { content: new_count, tts: false }, { headers: { 'Authorization': `${token}`, 'Content-Type': 'application/json' } }); if (login == false) { console.log(color2(`Made by shwp`, '35')); console.log(color2(`You have been login as ${i.data.author.username} (${i.data.author.id})`, '37')); } login = true; console.log(color('OK', '32'), `The count is now at ${i.data.content}`); } catch (error) { console.error(color('ERROR', '31'), error); } } (async () => { let config; try { config = JSON.parse(fs.readFileSync('config.json', 'utf8')); const token = config.token, ws = new WebSocket('wss://gateway.discord.gg/?v=9&encoding=json'); ws.on('open', () => status(ws, token, config)); ws.on('message', async (data) => { const payload = JSON.parse(data), { op, d } = payload; if (op === 10) { const { heartbeat_interval } = d; setInterval(() => { ws.send(JSON.stringify({ op: 1, d: null })); }, heartbeat_interval); } }); } catch (error) { console.error(color('ERROR', '31'), error); process.exit(1); } const speed = config.interval_speed; setInterval(count, speed); })();